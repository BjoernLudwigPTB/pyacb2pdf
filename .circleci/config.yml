# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
    - image: circleci/python:3.6.1

    working_directory: ~/repo

    steps:

    # Checkout code.
    - checkout

    # Create test-result folder.
    - run:
        name: Create test result folder
        command: |
          mkdir test-results
          mkdir test-results/pytest

    # Download and cache dependencies.
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "requirements.txt" }}
        # Fallback to using the latest cache if no exact match is found.
        - v1-dependencies-

    - run:
        name: Install dependencies
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt

    - save_cache:
        paths:
        - ./venv
        key: v1-dependencies-{{ checksum "requirements.txt" }}

    - run:
        name: Install Codacy reporter
        command: |
          python3 -m venv venv
          . venv/bin/activate
          pip install codacy-coverage

    # Set up Code Climate by downloading test reporter as a static binary
    - run:
        name: Set up Code Climate test-reporter
        command: |
          curl -L 'https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64' > ./cc-test-reporter
          chmod +x ./cc-test-reporter

    # Run coverage! We use pytest's test-runner (https://pytest.org)
    # 1. Notify Code Climate of a pending test report using `before-build`
    # 2. Upload test report to Code Climate using `after-build`
    # 3. Upload test report to Codacy using `python-codacy-coverage`
    # 4. Produce normal report to show in CircleCI 'test-reports'
    - run:
        name: Produce coverage report
        command: |
          . venv/bin/activate
          ./cc-test-reporter before-build
          python -m pytest -v --cov=. test/ \
           --junitxml=test_results/pytest/pytest.xml
          coverage xml --omit=venv/*
          ./cc-test-reporter after-build --coverage-input-type coverage.py \
              --exit-code $?
          python-codacy-coverage -r coverage.xml
          mv coverage.xml ./test_results/pytest/
          coverage report -m --omit=venv/* > test_results/pytest/coverage.log

    # Store test results.
    - store_artifacts:
        path: test_results
        destination: test_results

    - store_test_results:
        path: test_results
